import * as THREE from "three";
import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader.js";
import { WEBXR_CONFIG, getErrorMessage } from "./config.js";

export class ARSession {
  constructor() {
    this.session = null;
    this.renderer = null;
    this.scene = null;
    this.camera = null;
    this.reticle = null;
    this.model = null;
    this.hitTestSource = null;
    this.hitTestSourceRequested = false;
    this.isPlaced = false;
    this.language = "fr";
  }

  async init(modelURL, language = "fr") {
    this.language = language;
    console.log("üîß Initialisation ARSession...");
    console.log("üìÑ ModelURL:", modelURL);

    try {
      // V√©rifier le support WebXR
      console.log("üîç V√©rification support WebXR...");
      if (!navigator.xr) {
        console.log("‚ùå navigator.xr non disponible");
        throw new Error(getErrorMessage("webxrNotSupported", language));
      }
      console.log("‚úÖ navigator.xr disponible");

      // V√©rifier le support AR
      console.log("üîç V√©rification support AR...");
      const isSupported = await navigator.xr.isSessionSupported("immersive-ar");
      console.log("üìä Support AR:", isSupported);
      if (!isSupported) {
        console.log("‚ùå AR non support√©e");
        throw new Error(getErrorMessage("arNotSupported", language));
      }
      console.log("‚úÖ AR support√©e");

      // V√©rifier les permissions cam√©ra avant la session AR
      console.log("üìπ V√©rification permissions cam√©ra...");
      try {
        if (navigator.permissions) {
          const cameraPermission = await navigator.permissions.query({
            name: "camera",
          });
          console.log("üìπ Permission cam√©ra:", cameraPermission.state);

          if (cameraPermission.state === "denied") {
            console.warn("‚ö†Ô∏è Permission cam√©ra refus√©e");
            throw new Error(
              "Permission cam√©ra refus√©e. Veuillez autoriser l'acc√®s √† la cam√©ra."
            );
          }
        }

        // Test getUserMedia pour s'assurer que la cam√©ra est accessible
        try {
          const stream = await navigator.mediaDevices.getUserMedia({
            video: true,
          });
          console.log("‚úÖ Acc√®s cam√©ra confirm√©");
          // Fermer le stream imm√©diatement, WebXR s'en occupera
          stream.getTracks().forEach((track) => track.stop());
        } catch (mediaError) {
          console.error("‚ùå Erreur acc√®s cam√©ra via getUserMedia:", mediaError);
          if (mediaError.name === "NotAllowedError") {
            throw new Error(
              "Acc√®s cam√©ra refus√©. Veuillez autoriser l'acc√®s √† la cam√©ra."
            );
          }
          throw new Error(`Erreur cam√©ra: ${mediaError.message}`);
        }
      } catch (permError) {
        console.warn("‚ö†Ô∏è Impossible de v√©rifier permissions:", permError);
        // Continuer quand m√™me, certains appareils ne supportent pas l'API permissions
      }

      // Cr√©er la session AR avec la configuration
      const sessionOptions = {
        ...WEBXR_CONFIG.sessionOptions,
        domOverlay: { root: document.body },
      };
      console.log("üöÄ Demande de session AR...", sessionOptions);
      try {
        this.session = await navigator.xr.requestSession(
          "immersive-ar",
          sessionOptions
        );
        console.log("‚úÖ Session AR cr√©√©e:", this.session);
        console.log("üì± V√©rification √©tat session:", {
          renderState: this.session.renderState,
          inputSources: this.session.inputSources,
          environmentBlendMode: this.session.environmentBlendMode,
        });
      } catch (sessionError) {
        console.error("‚ùå ERREUR demande session AR:", sessionError);
        console.log("üîç D√©tails erreur:", {
          name: sessionError.name,
          message: sessionError.message,
          stack: sessionError.stack,
        });
        throw sessionError;
      }

      // Configurer Three.js pour WebXR
      this.setupThreeJS();

      // Charger le mod√®le 3D
      await this.loadModel(modelURL);

      // Configurer les √©v√©nements
      this.setupEventListeners();

      // D√©marrer la boucle de rendu
      console.log("üîÑ D√©marrage de la boucle de rendu...");
      this.renderer.setAnimationLoop(this.render.bind(this));

      // V√©rifier que le canvas est visible
      setTimeout(() => {
        const canvas = this.renderer.domElement;
        console.log("üñ•Ô∏è √âtat du canvas:", {
          width: canvas.width,
          height: canvas.height,
          style: canvas.style.cssText,
          parentNode: canvas.parentNode ? "attach√©" : "non attach√©",
          visibility: getComputedStyle(canvas).visibility,
          display: getComputedStyle(canvas).display,
        });
      }, 1000);

      console.log("ü•Ω Session AR initialis√©e avec succ√®s");
      return this.session;
    } catch (error) {
      console.error("‚ùå Erreur lors de l'initialisation AR:", error);
      throw error;
    }
  }

  setupThreeJS() {
    console.log("üé® Configuration Three.js pour WebXR...");

    // Cr√©er le renderer WebXR avec la configuration
    console.log("üñ•Ô∏è Cr√©ation du renderer WebGL...");
    this.renderer = new THREE.WebGLRenderer(WEBXR_CONFIG.renderer);
    console.log("‚úÖ Renderer cr√©√©");

    this.renderer.setPixelRatio(window.devicePixelRatio);
    this.renderer.setSize(window.innerWidth, window.innerHeight);
    console.log(
      "üìê Taille renderer d√©finie:",
      window.innerWidth,
      "x",
      window.innerHeight
    );

    this.renderer.xr.enabled = true;
    console.log("ü•Ω XR activ√© sur le renderer");

    this.renderer.xr.setSession(this.session);
    console.log("üîó Session XR li√©e au renderer");

    // Cr√©er la sc√®ne
    console.log("üé¨ Cr√©ation de la sc√®ne 3D...");
    this.scene = new THREE.Scene();
    console.log("‚úÖ Sc√®ne cr√©√©e");

    // Cr√©er la cam√©ra avec la configuration
    console.log("üì∑ Cr√©ation de la cam√©ra...");
    const { fov, near, far } = WEBXR_CONFIG.camera;
    this.camera = new THREE.PerspectiveCamera(
      fov,
      window.innerWidth / window.innerHeight,
      near,
      far
    );
    console.log("‚úÖ Cam√©ra cr√©√©e avec FOV:", fov);

    // Cr√©er le r√©ticule (indicateur de placement)
    console.log("üéØ Cr√©ation du r√©ticule...");
    this.createReticle();
    console.log("‚úÖ R√©ticule cr√©√©");

    // Ajouter l'√©clairage avec la configuration
    console.log("üí° Configuration de l'√©clairage...");
    this.setupLighting();
    console.log("‚úÖ √âclairage configur√©");

    // Ajouter le canvas au DOM
    console.log("üì± Ajout du canvas au DOM...");
    document.body.appendChild(this.renderer.domElement);
    console.log("‚úÖ Canvas ajout√© au DOM");
  }

  createReticle() {
    const { innerRadius, outerRadius, segments, color, opacity } =
      WEBXR_CONFIG.reticle;
    const geometry = new THREE.RingGeometry(
      innerRadius,
      outerRadius,
      segments
    ).rotateX(-Math.PI / 2);
    const material = new THREE.MeshBasicMaterial({
      color,
      transparent: true,
      opacity,
    });

    this.reticle = new THREE.Mesh(geometry, material);
    this.reticle.matrixAutoUpdate = false;
    this.reticle.visible = false;
    this.scene.add(this.reticle);
  }

  setupLighting() {
    const { hemisphere, directional } = WEBXR_CONFIG.lighting;

    // √âclairage h√©misph√©rique
    const hemiLight = new THREE.HemisphereLight(
      hemisphere.skyColor,
      hemisphere.groundColor,
      hemisphere.intensity
    );
    this.scene.add(hemiLight);

    // √âclairage directionnel
    const dirLight = new THREE.DirectionalLight(
      directional.color,
      directional.intensity
    );
    dirLight.position.set(...directional.position);
    this.scene.add(dirLight);
  }

  async loadModel(modelURL) {
    console.log("üì¶ Chargement du mod√®le 3D...", modelURL);
    return new Promise((resolve, reject) => {
      const loader = new GLTFLoader();
      console.log("üîß Loader GLTF cr√©√©");

      loader.load(
        modelURL,
        (gltf) => {
          this.model = gltf.scene;

          // Redimensionner le mod√®le pour l'AR avec la configuration
          const box = new THREE.Box3().setFromObject(this.model);
          const size = box.getSize(new THREE.Vector3());
          const maxDim = Math.max(size.x, size.y, size.z);
          const scale = WEBXR_CONFIG.model.defaultScale / maxDim;
          this.model.scale.setScalar(scale);

          // Centrer le mod√®le
          const center = box.getCenter(new THREE.Vector3());
          this.model.position.sub(center.multiplyScalar(scale));

          this.model.visible = false;
          this.scene.add(this.model);

          console.log("üì¶ Mod√®le 3D charg√© pour AR");
          resolve(this.model);
        },
        (progress) => {
          console.log(
            "üì• Chargement mod√®le:",
            (progress.loaded / progress.total) * 100 + "%"
          );
        },
        (error) => {
          console.error("‚ùå Erreur chargement mod√®le:", error);
          reject(new Error(getErrorMessage("modelLoadFailed", this.language)));
        }
      );
    });
  }

  setupEventListeners() {
    // G√©rer les taps pour placer le mod√®le
    this.session.addEventListener("select", this.onSelect.bind(this));

    // G√©rer la fin de session
    this.session.addEventListener("end", this.onSessionEnd.bind(this));
  }

  onSelect() {
    if (this.reticle.visible && this.model) {
      // Placer le mod√®le √† la position du r√©ticule
      this.model.position.setFromMatrixPosition(this.reticle.matrix);
      this.model.visible = true;
      this.isPlaced = true;

      console.log("üìç Mod√®le plac√© en AR");
    }
  }

  onSessionEnd() {
    // Nettoyer les ressources
    if (
      this.renderer &&
      this.renderer.domElement &&
      this.renderer.domElement.parentNode
    ) {
      this.renderer.domElement.parentNode.removeChild(this.renderer.domElement);
    }

    this.session = null;
    this.renderer = null;
    this.scene = null;
    this.camera = null;
    this.reticle = null;
    this.model = null;
    this.hitTestSource = null;
    this.hitTestSourceRequested = false;
    this.isPlaced = false;

    console.log("üîö Session AR termin√©e");
  }

  render(timestamp, frame) {
    if (frame) {
      // G√©rer le hit testing pour le r√©ticule
      this.handleHitTest(frame);
    }

    // Faire tourner le mod√®le s'il est plac√©
    if (this.model && this.model.visible) {
      this.model.rotation.y += WEBXR_CONFIG.model.rotationSpeed;
    }

    // Rendre la sc√®ne
    this.renderer.render(this.scene, this.camera);
  }

  async handleHitTest(frame) {
    const referenceSpace = this.renderer.xr.getReferenceSpace();
    const session = this.renderer.xr.getSession();

    if (!this.hitTestSourceRequested) {
      try {
        // Essayer d'obtenir la source de hit test depuis les contr√¥leurs
        const inputSources = session.inputSources;
        if (inputSources.length > 0 && inputSources[0].targetRaySpace) {
          this.hitTestSource = await session.requestHitTestSource({
            space: inputSources[0].targetRaySpace,
          });
        } else {
          // Fallback : utiliser l'espace de r√©f√©rence du viewer
          this.hitTestSource = await session.requestHitTestSource({
            space: session.viewerSpace,
          });
        }
        this.hitTestSourceRequested = true;
      } catch (error) {
        console.warn("Hit test source non disponible:", error);
        this.hitTestSourceRequested = true; // √âviter de r√©essayer en boucle
      }
    }

    if (this.hitTestSource) {
      const hitTestResults = frame.getHitTestResults(this.hitTestSource);

      if (hitTestResults.length > 0) {
        const hit = hitTestResults[0];
        this.reticle.visible = true;
        this.reticle.matrix.fromArray(
          hit.getPose(referenceSpace).transform.matrix
        );
      } else {
        this.reticle.visible = false;
      }
    }
  }

  end() {
    if (this.session) {
      this.session.end();
    }
  }
}
