import { storage } from "./config";
import {
  ref,
  getDownloadURL,
  listAll,
  uploadBytes,
  getBytes,
} from "firebase/storage";

/**
 * V√©rifie si un mod√®le 3D existe pour un module donn√©
 * @param {string} moduleId - L'ID du module
 * @returns {Promise<boolean>} - True si le mod√®le existe, false sinon
 */
export async function check3DModelExists(moduleId) {
  try {
    // Essayer d'abord .glb puis .gltf
    const extensions = ["glb", "gltf"];

    for (const ext of extensions) {
      try {
        const modelRef = ref(storage, `models/${moduleId}.${ext}`);
        await getDownloadURL(modelRef);
        return true;
      } catch (error) {
        if (error.code !== "storage/object-not-found") {
          console.warn(
            `Erreur lors de la v√©rification du mod√®le 3D ${moduleId}.${ext}:`,
            error
          );
        }
        // Continue avec l'extension suivante
      }
    }

    return false;
  } catch (error) {
    console.warn(
      `Erreur lors de la v√©rification du mod√®le 3D pour le module ${moduleId}:`,
      error
    );
    return false;
  }
}

/**
 * R√©cup√®re l'URL de t√©l√©chargement d'un mod√®le 3D directement depuis Firebase
 * @param {string} moduleId - L'ID du module
 * @returns {Promise<string|null>} - L'URL du mod√®le ou null si non trouv√©
 */
export async function get3DModelURL(moduleId) {
  try {
    // Essayer d'abord .glb puis .gltf
    const extensions = ["glb", "gltf"];

    for (const ext of extensions) {
      try {
        const modelRef = ref(storage, `models/${moduleId}.${ext}`);
        const firebaseUrl = await getDownloadURL(modelRef);

        console.log(`üîÑ URL Firebase directe: ${firebaseUrl}`);

        // Retourner directement l'URL Firebase (avec CORS activ√©)
        return firebaseUrl;
      } catch (error) {
        if (error.code !== "storage/object-not-found") {
          console.warn(
            `Erreur lors de la r√©cup√©ration du mod√®le 3D ${moduleId}.${ext}:`,
            error
          );
        }
        // Continue avec l'extension suivante
      }
    }

    return null;
  } catch (error) {
    console.warn(
      `Impossible de r√©cup√©rer l'URL du mod√®le 3D pour le module ${moduleId}:`,
      error
    );
    return null;
  }
}

/**
 * Liste tous les mod√®les 3D disponibles
 * @returns {Promise<string[]>} - Liste des IDs de modules ayant un mod√®le 3D
 */
export async function listAvailable3DModels() {
  try {
    const modelsRef = ref(storage, "models/");
    const result = await listAll(modelsRef);

    // Extraire les IDs des modules √† partir des noms de fichiers
    const moduleIds = result.items
      .filter(
        (item) => item.name.endsWith(".gltf") || item.name.endsWith(".glb")
      )
      .map((item) => item.name.replace(/\.(gltf|glb)$/, ""));

    // Supprimer les doublons (au cas o√π il y aurait .gltf ET .glb pour le m√™me module)
    return [...new Set(moduleIds)];
  } catch (error) {
    console.error(
      "Erreur lors de la r√©cup√©ration de la liste des mod√®les 3D:",
      error
    );
    return [];
  }
}

/**
 * Sauvegarde l'univers personnel de l'utilisateur dans Firebase Storage
 * @param {string} userId - L'ID de l'utilisateur
 * @param {Array} universeData - Les donn√©es de l'univers √† sauvegarder
 * @returns {Promise<boolean>} - True si succ√®s, false si √©chec
 */
export async function savePersonalUniverse(userId, universeData) {
  try {
    console.log("üíæ Sauvegarde de l'univers pour l'utilisateur:", userId);
    console.log("üì¶ Donn√©es √† sauvegarder:", universeData);

    // Cr√©er la r√©f√©rence du fichier
    const universeRef = ref(storage, `users/${userId}/universe.json`);

    // S√©rialiser les donn√©es en JSON
    const jsonData = JSON.stringify(universeData, null, 2);
    const jsonBlob = new Blob([jsonData], { type: "application/json" });

    // Upload vers Firebase Storage
    await uploadBytes(universeRef, jsonBlob);

    console.log("‚úÖ Univers sauvegard√© avec succ√®s!");
    return true;
  } catch (error) {
    console.error("‚ùå Erreur lors de la sauvegarde de l'univers:", error);
    return false;
  }
}

/**
 * Charge l'univers personnel de l'utilisateur depuis Firebase Storage
 * @param {string} userId - L'ID de l'utilisateur
 * @returns {Promise<Array|null>} - Les donn√©es de l'univers ou null si non trouv√©
 */
export async function loadPersonalUniverse(userId) {
  try {
    console.log("üìÇ Chargement de l'univers pour l'utilisateur:", userId);

    // Cr√©er la r√©f√©rence du fichier
    const universeRef = ref(storage, `users/${userId}/universe.json`);

    // T√©l√©charger le fichier
    const arrayBuffer = await getBytes(universeRef);
    const jsonString = new TextDecoder().decode(arrayBuffer);
    const universeData = JSON.parse(jsonString);

    console.log("‚úÖ Univers charg√© avec succ√®s:", universeData);
    return universeData;
  } catch (error) {
    if (error.code === "storage/object-not-found") {
      console.log("üìù Aucun univers sauvegard√© trouv√© pour cet utilisateur");
      return null;
    }

    console.error("‚ùå Erreur lors du chargement de l'univers:", error);
    return null;
  }
}

/**
 * V√©rifie si l'utilisateur a un univers sauvegard√©
 * @param {string} userId - L'ID de l'utilisateur
 * @returns {Promise<boolean>} - True si l'univers existe, false sinon
 */
export async function hasPersonalUniverse(userId) {
  try {
    const universeRef = ref(storage, `users/${userId}/universe.json`);
    await getDownloadURL(universeRef);
    return true;
  } catch (error) {
    return false;
  }
}
